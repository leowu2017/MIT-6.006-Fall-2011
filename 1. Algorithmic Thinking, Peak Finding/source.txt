1. Algorithmic Thinking, Peak Finding

a. 1D peak finding

# Definition:
Given an array [a, b, c, d, e],
c is defined as a peak if c >= b and c >= d.

# Problem:
Find "a" peak given an array.

# Solution:
i.) time complexity: θ(N)
Scan each element from left to right until we find an element which is greater than or equal to both the left and the right elements.

ii.) time complexity: θ(log(N))
Divide and conquer.
Given a array x with length N,
	if N is 1:
		the peak is x[0].

	select an index j = N / 2
	if (j - 1 > 0) and (x[j - 1] > x[j]):
		find peak between 0 and j - 1 recursively.
	else if (j + 1 < N) and (x[j + 1] > x[j]):
		find peak j + 1 and N recursively.
	else
		the peak is j.

b. 2D peak finding

# Definition:
Given a matrix [[a, b, c],
				 [d, e, f],
				 [g, h, i]]
e is defined as a peak if e >= b, e >= d, e >= h, and e >= f.

# Problem:
Find "a" peak given a matrix.

# Solution:
i.) time complexity θ(M * N)
	select an index (i, j) in the matrix.
	loop until find a peak:
		if x[i - 1, j] > x[i, j]:
			set i = i - 1
		else if x[i + 1, j] > x[i, j]:
			set i = i + 1
		else if x[i, j - 1] > x[i, j]:
			set j = j - 1
		else if x[i, j + 1] > x[i, j]:
			set j = j + 1
		else:
			the peak is at (i, j).

ii.) time complexity θ(N * log(M))
Divide and conquer.
Given a matrix x with size M x N
	i = M / 2
	loop index i until find a peak:	
		find max value in column x[i, :] with row index j
		if x[i - 1, j] > x[i, j]:
			find peak with row ranges between 0 and i - 1.
		else if x[i + 1, j] > x[i, j]:
			find peak with row ranges between i + 1 and M.
		else
			the peak is at (i, j).

Youtube link:
https://www.youtube.com/watch?v=HtSuA80QTyo